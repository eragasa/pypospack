import pytest
from collections import OrderedDict
import numpy as np

Ni_testing_set = OrderedDict()
Ni_testing_set['symbols'] = ['Ni']
Ni_testing_set['symbol_pairs'] = [['Ni','Ni']]
Ni_testing_set['parameter_names'] = ['NiNi_D0','NiNi_a','NiNi_r0']
Ni_testing_set['parameters'] = OrderedDict([
    ('NiNi_D0',0.001114),
    ('NiNi_a',3.429506),
    ('NiNi_r0',2.6813)
])
Ni_testing_set['r_max'] = 11.0
Ni_testing_set['N_r'] = 500

NiAl_testing_set=OrderedDict()
NiAl_testing_set['symbols'] = ['Ni','Al']
NiAl_testing_set['symbol_pairs'] = [['Ni','Ni'],['Ni','Al'],['Al','Al']]
NiAl_testing_set['parameters']= OrderedDict([
    ('NiNi_D0',0.001114),('NiNi_a',3.429506),('NiNi_r0',2.6813),
    ('NiAl_D0',0.001114),('NiAl_a',3.429506),('NiAl_r0',2.6813),
    ('AlAl_D0',0.001114),('AlAl_a',3.429506),('AlAl_r0',2.6813)
])
NiAl_testing_set['parameter_names'] = [
    'NiNi_D0','NiNi_a','NiNi_r0',
    'NiAl_D0','NiAl_a','NiAl_r0',
    'AlAl_D0','AlAl_a','AlAl_r0'
]
NiAl_testing_set['r_max'] = 11.0
NiAl_testing_set['N_r'] = 500

testing_sets = [(Ni_testing_set),(NiAl_testing_set)]
testing_names = ['Ni','NiAl']

class TestMorsePotential(object):

    def test_initialize_no_args(self):
        from pypospack.potential import MorsePotential
        p = MorsePotential()

    @pytest.mark.parametrize("testing_set",testing_sets,ids=testing_names)
    def test_initialize(testing_set):
        from pypospack.potential import MorsePotential
        o = MorsePotential(symbols=testing_set['symbols'])

        assert type(o.symbols) is list
        assert type(o.symbol_pairs) is list
        assert type(o.parameter_names) is list
        assert type(o.parameters) is OrderedDict

        assert o.symbols == testing_set['symbols']
        assert o.symbol_pairs == testing_set['symbol_pairs']
        assert o.parameter_names == testing_set['parameter_names']
        assert set(o.parameters.keys()) == set(parameters.keys())
        assert all([o.parameters[k] == v for k,v in parameters])

def test__can_import_from_potentials_package():
    from pypospack.potential import MorsePotential

def test__import__pypospack_potentials_morse():
    from pypospack.potential.pair_morse import MorsePotential

if False:
    @pytest.mark.parametrize("testing_set",testing_sets,ids=testing_names)
    def test____init__(testing_set):
        symbols = testing_set['symbols']
        symbol_pairs = testing_set['symbol_pairs']
        parameter_names = testing_set['parameter_names']
        parameters = testing_set['parameters']
        r_max = testing_set['r_max']
        N_r = testing_set['N_r']

        try:
            from pypospack.potential import MorsePotential
            morse = potential.MorsePotential(symbols=symbols)
        except:
            pytest.fail()

        #<-- test attribute, symbols
        assert type(morse.symbols) is list
        assert len(morse.symbols) == len(symbols)
        assert morse.symbols == symbols

        #<--- test attribute, symbol_pairs
        assert type(morse.symbol_pairs) is list
        assert len(morse.symbol_pairs) == len(symbol_pairs)
        assert morse.symbol_pairs == symbol_pairs

        #<-- test attribute, parameter_names
        assert type(morse.parameter_names) is list
        assert len(morse.parameter_names) == len(parameter_names)
        assert morse.parameter_names == parameter_names
        #<-- test attribute, parameters
        assert type(morse.parameters) is OrderedDict
        for name,value in morse.parameters.items():
            assert value is None
        assert len(morse.parameters) == len(morse.parameter_names)
        for name in morse.parameter_names:
            assert name in morse.parameters

    @pytest.mark.parametrize("testing_set",testing_sets,ids=testing_names)
    def test__1element____init__(testing_set):
        symbols = testing_set['symbols']
        symbol_pairs = testing_set['symbol_pairs']
        parameter_names = testing_set['parameter_names']
        parameters = testing_set['parameters']
        r_max = testing_set['r_max']
        N_r = testing_set['N_r']

        try:
            from pypospack.potential import MorsePotential
            morse = potential.MorsePotential(symbols=symbols)
        except:
            pytest.fail()

        #<-- test attribute symbols
        assert type(morse.symbols) is list
        assert len(morse.symbols) == len(symbols)
        assert morse.symbols == symbols

        #<--- test attribute symbol_pairs
        assert type(morse.symbol_pairs) is list
        assert len(morse.symbol_pairs) == len(symbol_pairs)
        assert morse.symbol_pairs == symbol_pairs

        #<-- test attribute parameter_names
        assert type(morse.parameter_names) is list
        assert len(morse.parameter_names) == len(parameter_names)
        assert morse.parameter_names == parameter_names
        #<-- test attribute parameters
        assert type(morse.parameters) is OrderedDict
        for name,value in morse.parameters.items():
            assert value is None
        assert len(morse.parameters) == len(morse.parameter_names)
        for name in morse.parameter_names:
            assert name in morse.parameters

    @pytest.mark.parametrize("testing_set",testing_sets,ids=testing_names)
    def test__evaluate(testing_set):
        symbols = ['Ni']
        symbol_pairs = [['Ni','Ni']]
        parameter_names = ['NiNi_D0','NiNi_a','NiNi_r0']
        parameters = OrderedDict()
        parameters['NiNi_D0'] = 0.001114
        parameters['NiNi_a'] = 3.429506
        parameters['NiNi_r0'] = 2.6813

        r_max = 11.
        N_r = 500
        r = r_max * np.linspace(1,100,N_r)/100

        try:
            morse = potential.MorsePotential(symbols=symbols)
            morse.evaluate(r,parameters)
        except:
            pytest.fail()

        assert isinstance(morse.potential, OrderedDict)
        for pair_key,pot in morse.potential.items():
            assert isinstance(pot,np.ndarray)
            assert pot.shape == r.shape

    def test__2element___init__():
        symbols = ['Ni','Al']
        parameters= OrderedDict()
        parameters['NiNi_D0'] = 0.001114
        parameters['NiNi_a'] = 3.429506
        parameters['NiNi_r0'] = 2.6813
        parameters['NiAl_D0'] = 0.001114
        parameters['NiAl_a'] = 3.429506
        parameters['NiAl_r0'] = 2.6813
        parameters['AlAl_D0'] = 0.001114
        parameters['AlAl_a'] = 3.429506
        parameters['AlAl_r0'] = 2.6813

        symbol_pairs = [['Ni','Ni'],['Ni','Al'],['Al','Al']]
        parameter_names = ['NiNi_D0','NiNi_a','NiNi_r0',
                           'NiAl_D0','NiAl_a','NiAl_r0',
                           'AlAl_D0','AlAl_a','AlAl_r0']

        try:
            morse = potential.MorsePotential(symbols=symbols)
        except:
            pytest.fail()

        assert type(morse.symbols) is list
        assert type(morse.symbol_pairs) is list
        assert morse.symbol_pairs == symbol_pairs
        assert type(morse.parameter_names) is list
        assert morse.parameter_names == parameter_names
if __name__ == "__main__":

    symbols = ['Ni']
    symbol_pairs = [['Ni','Ni']]
    parameter_names = ['NiNi_D0','NiNi_a','NiNi_r0']
    parameters = OrderedDict()
    parameters['NiNi_D0'] = 0.001114
    parameters['NiNi_a'] = 3.429506
    parameters['NiNi_r0'] = 2.6813

    r_max = 11.
    N_r = 500
    r = r_max * np.linspace(1,100,N_r)/100

    try:
        morse = potential.MorsePotential(symbols=symbols)
        morse.evaluate(r,parameters)
    except:
        print(morse.parameters)
