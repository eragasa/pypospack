.. _python_intro:

###########################################################
Software Development for Managing Computational Experiments
###########################################################

Software development in a scientific setting, particularly an academic one, is a process which can be particularly frustrating.  At some point, I want to be a professor somewhere, and I've written these notes to help me organize the requirements for software development.

Typical processes for software development center around the development of product for a business setting.  A businesss environment typically has the resources to implement project management, software development expertise, functional domain specialists, which are required for a traditional software development lifecycle projects.  In a research environment, with the exception of environments which have large software development efforts developed as a group, the same person maybe the analyst, developer, and end user.  Additionally, collaboration for the development of software is rare due to individual meritocracy nature of science.  A sober understanding of the realities of research-driven software development needs to be understand to successfully develop software in way that allows constant extension and implementation.

Let us consider the standard research team at a university, there is a primary investigator who runs a research group consisting of graduate students, who are usually working on research projects funded by a relatively short-term research project.  The primary focus of the research is the development of publications and a successful completion of the funding contract.  Often in this situation, there are processes and software tools developed required to solve the problem.  Usually these solutions are ad-hoc, manually driven, and leads to problems of repeatability, lack of automation, etc.  Software development is usually done by the graduate students, who are subject matter experts on the subject, but often lack software development skills.  Programming is usually done idiomatically from examples found from reference textbooks, scripts and code from collaborators, etc.

The writing which I am providing here is really specific to problem in computational materials science.  In this case, existing computational software can be leveraged as a calculator as part of a process for scientific discovery through computational experiments.  This process is not for the development of high-performance code.

* Skill development.  New comers to a research group that has a heavy computational focus, should go through a bootcamp which prepares them with a baseline of skills for running simulations, managing their computing resources, familiarizes them with the infrastructure for project management, version control, and documentation.
* Project management.
* Adapting business process management processes for the scientific environment.
* Ideas on architecture.
* Coding standards.
* Using version control in a scientific development environment.

A large portion of business process management comes down to formal documentation of requirements and then developing documentation of the code for those requirements.  In some sense, the process of requirements documentation isn't really necessary in a scientific setting.  

Skill Development
=================

For entry into computational materials, it is likely that incoming graduate students will be deficient in core skills required for modern computational materials science research. 

* Physicists
* Mathematicians
* Materials Scientists
* Engineers

In this case, a computational materials science bootcamp will be a necessity.  The materials bootcamp should introduce the basics of the tools being used for running simulations, which should include non-trivial calculations and an explanation of the variables which can be manipulated, tests for convergence, and the like.  Bootstrapping a new computational group will be difficult, but has the benefit of building robust processes from the beginning.  With an existing computationa effort, there will be resistance due to existing ad hoc processes and building base tools for routine analysis has little benefit.

Architectural Considerations
============================

* Parallelization of workflows

Research projects are heavily dependent upon finding funding sources.  These projects may lead to code development by different members moving the code in different directions.  This has fundamental implications on architectural design of software which needs to be done upfront.  
While developing a code base, issues with collaboration with different groups may leads to problems with forking of the code base, this makes merging code difficult.

Project Management
==================

Contents
========
.. toctree::
   :maxdepth: 2

   sdm
   testing
   unittest
   vasp
   mpi4py
