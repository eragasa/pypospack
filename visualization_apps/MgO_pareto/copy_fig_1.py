# this script produces figure 1 from the PRL article
import os,sys
import numpy as np
import matplotlib as mpl
import matplotlib.pyplot as plt
from matplotlib import cm
import pyflamestk.pyposmat as pyposmat
import pyflamestk.pareto as pareto
import pyflamestk.pyposmatpost as post
# import pyflamestk.stats as stats

# the directory from which we get data
# the data is generated from pypomat
data = 'data'
dpi = 800

cdict = {'r': ((0.0,0.0,0.0),(0.5,1.0,0.7),(1.0,1.0,1.0)),
         'g': ((0.0,0.0,0.0),(0.5,1.0,0.0),(1.0,1.0,1.0)),
         'b': ((0.0,0.0,0.0),(0.5,1.0,0.0),(1.0,0.5,1.0))}
#mycmap = matplotlib.colors('mycmap',cdict,256)
cmap_name = 'Blues'
cmap_min = 0
cmap_max = 100
c_results = 30
c_pareto = 70
c_culled = 100
rgb_results = None
rgb_pareto = None
rgb_culled = None

class MplColorHelper(object):
    """
    Ref:
        http://stackoverflow.com/questions/26108436/how-can-i-get-the-matplotlib-rgb-color-given-the-colormap-name-boundrynorm-an
    """
    def __init__(self, cmap_name, start_val, stop_val):
        self.cmap_name = cmap_name
        self.cmap = plt.get_cmap(cmap_name)
        self.norm = mpl.colors.Normalize(vmin=start_val,vmax=stop_val)
        self.scalar_map = mpl.cm.ScalarMappable(norm=self.norm, cmap=self.cmap)

    def get_rgb(self,val):
        return self.scalar_map.to_rgba(val)

def get_rgb_from_cmap(c_val,cmap_name,start_val,stop_val):
    """

    Ref:
        http://stackoverflow.com/questions/26108436/how-can-i-get-the-matplotlib-rgb-color-given-the-colormap-name-boundrynorm-an
    """
    mpl_color_helper = MplColorHelper(cmap_name,start_val,stop_val)
    return mpl_color_helper.get_rgb(c_val)

rgb_results = get_rgb_from_cmap(c_results,cmap_name,cmap_min,cmap_max)
rgb_pareto = get_rgb_from_cmap(c_pareto,cmap_name,cmap_min,cmap_max)
rgb_culled = get_rgb_from_cmap(c_culled,cmap_name,cmap_min,cmap_max)

print('rgb_results = {}'.format(rgb_results))
print('rgb_pareto = {}'.format(rgb_pareto))
print('rgb_culled = {}'.format(rgb_culled))

free_params = ['chrg_Mg','MgO_A', 'MgO_rho', 'OO_A', 'OO_rho', 'OO_C']
qoi_ref_values = {'MgO_NaCl.a0': 4.246,
                  'MgO_NaCl.c11': 277.00031,
                  'MgO_NaCl.c12': 91.67016,
                  'MgO_NaCl.c44': 144.00722,
                  'MgO_NaCl.B': 153.4468767,
                  'MgO_NaCl.G': 92.665075,
                  'MgO_NaCl.fr_a': 10.9781666,
                  'MgO_NaCl.fr_c': 8.98642095,
                  'MgO_NaCl.sch':5.067179685,
                  'MgO_NaCl.001s': 0.055950069}
qoi_ref_latex = {'MgO_NaCl.a0':'$a_0$',
                 'MgO_NaCl.c11':'$c_{11}$',
                 'MgO_NaCl.c12':'$c_{12}$',
                 'MgO_NaCl.c44':'$c_{44}$',
                 'MgO_NaCl.B':'$B$',
                 'MgO_NaCl.G':'$G$',
                 'MgO_NaCl.fr_a':'$E_{fr,a}$',
                 'MgO_NaCl.fr_c':'$E_{fr,c}$',
                 'MgO_NaCl.sch':'$E_{sch}$',
                 'MgO_NaCl.001s':'$\gamma_{001}$'}

n_iterations = 10

# these are the formats of the files generated by pyposmat
fname_results_format = "results_{:03d}.out"
fname_pareto_format = "pareto_{:03d}.out"
fname_culled_format = "culled_{:03d}.out"

print('creating iteration results....')
sr = []
for i in range(n_iterations):
    fname_results = os.path.join(data,
                                 fname_results_format.format(i))
    fname_pareto = os.path.join(data,
                                fname_pareto_format.format(i))
    fname_culled = os.path.join(data,
                                fname_culled_format.format(i))
    print('reading_iteration: ({}) '.format(i),
          '{}'.format(fname_results),
          '{}'.format(fname_pareto),
          '{}'.format(fname_culled))
    sr.append(pareto.SimulationResults())
    sr[i].read_simulation_results(fname_results,
                                  fname_pareto,
                                  fname_culled)

print('creating post-processor engine')
# create post processor engine
# -----------------------------------------------------------------------------
# -----------------------------------------------------------------------------
# -----------------------------------------------------------------------------
# -----------------------------------------------------------------------------
# -----------------------------------------------------------------------------
# -----------------------------------------------------------------------------
# MAGIC FOR SEATON STARTS HERE

srpp = []
for i in range(n_iterations):
    srpp.append(post.SimulationResultsPostProcessor(sr[i]))
    
for i in range(n_iterations):
    srpp[i].free_parameter_names = free_params

for i in range(n_iterations):
    srpp[i].qoi_reference_values = qoi_ref_values

# -----------------------------------------------------------------------------
# -----------------------------------------------------------------------------
# -----------------------------------------------------------------------------
# -----------------------------------------------------------------------------
# -----------------------------------------------------------------------------
# -----------------------------------------------------------------------------
# END MAGIC
print('create fig_1.png')

font = {'family' : 'serif',
        'weight' : 'normal',
        'size'   : 8}
mpl.rc('font', **font)

pair_names = ['MgO_NaCl.a0.err','MgO_NaCl.B.err']
axis = [0,2,0,600]

# plotting all the results
fig, axarr = plt.subplots(2,2)

# srpp[i]
# -- i --- iteration number
#           dt(str): should be in 'param','free_param','qoi','err','abs_err'
#           ds(str): should be in 'results','pareto','culled'
ax01 = axarr[0,0].scatter(srpp[0].get_data_frame(dt='abs_err',ds='results')[pair_names[0]],
                          srpp[0].get_data_frame(dt='abs_err',ds='results')[pair_names[1]],
                          s=1, color=rgb_results,label='results')
ax02 = axarr[0,0].scatter(srpp[0].get_data_frame(dt='abs_err',ds='pareto')[pair_names[0]],
                          srpp[0].get_data_frame(dt='abs_err',ds='pareto')[pair_names[1]],
                          s=1, color=rgb_pareto,label='pareto')
ax03 = axarr[0,0].scatter(srpp[0].get_data_frame(dt='abs_err',ds='culled')[pair_names[0]],
                          srpp[0].get_data_frame(dt='abs_err',ds='culled')[pair_names[1]],
                          s=1, color=rgb_culled,label='culled')
axarr[0,0].legend(handles=[ax01,ax02,ax03])
axarr[0,0].text(0.05,0.95,'N=1',
                verticalalignment = 'top', horizontalalignment = 'left',
                transform=axarr[0,0].transAxes,
                fontsize = 12,
                color='black', 
                bbox=dict(facecolor='white',edgecolor='black'))
axarr[0,0].axis((axis[0],axis[1],axis[2],axis[3]))
axarr[0,0].set_xlabel("$|$error in lattice parameter$|$ [$\AA$]")
axarr[0,0].set_ylabel("$|$error in B$|$ [GPa]")

ax11 = axarr[0,1].scatter(srpp[1].get_data_frame(dt='abs_err',ds='results')[pair_names[0]],
                         srpp[1].get_data_frame(dt='abs_err',ds='results')[pair_names[1]],
                         s=1,color=rgb_results,label='results')
ax12 = axarr[0,1].scatter(srpp[1].get_data_frame(dt='abs_err',ds='pareto')[pair_names[0]],
                         srpp[1].get_data_frame(dt='abs_err',ds='pareto')[pair_names[1]],
                         s=1,color=rgb_pareto,label='pareto')
ax13 = axarr[0,1].scatter(srpp[1].get_data_frame(dt='abs_err',ds='culled')[pair_names[0]],
                         srpp[1].get_data_frame(dt='abs_err',ds='culled')[pair_names[1]],
                         s=1,color=rgb_culled,label='culled')
axarr[0,1].legend(handles=[ax11,ax12,ax13])
axarr[0,1].text(0.05,0.95,'N=2',
                verticalalignment = 'top', horizontalalignment = 'left',
                transform=axarr[0,1].transAxes,
                fontsize = 12,
                color='black', 
                bbox=dict(facecolor='white',edgecolor='black'))
axarr[0,1].axis((axis[0],axis[1],axis[2],axis[3]))
axarr[0,1].set_xlabel("$|$error in lattice parameter$|$ [$\AA$]")
axarr[0,1].set_ylabel("$|$error in B$|$ [GPa]")


ax21 = axarr[1,0].scatter(srpp[2].get_data_frame(dt='abs_err',ds='results')[pair_names[0]],
                          srpp[2].get_data_frame(dt='abs_err',ds='results')[pair_names[1]],
                          s=1,color=rgb_results,label='results')
ax22 = axarr[1,0].scatter(srpp[2].get_data_frame(dt='abs_err',ds='pareto')[pair_names[0]],
                          srpp[2].get_data_frame(dt='abs_err',ds='pareto')[pair_names[1]],
                          s=1,color=rgb_pareto,label='pareto')
ax23 = axarr[1,0].scatter(srpp[2].get_data_frame(dt='abs_err',ds='culled')[pair_names[0]],
                          srpp[2].get_data_frame(dt='abs_err',ds='culled')[pair_names[1]],
                          s=1,color=rgb_culled,label='culled')
axarr[1,0].legend(handles=[ax21,ax22,ax23])
axarr[1,0].text(0.05,0.95,'N=3',

                verticalalignment = 'top', horizontalalignment = 'left',
                transform=axarr[1,0].transAxes,
                fontsize = 12,
                color='black', 
                bbox=dict(facecolor='white',edgecolor='black'))
axarr[1,0].axis((axis[0],axis[1],axis[2],axis[3]))
axarr[1,0].set_xlabel("$|$error in lattice parameter$|$ [$\AA$]")
axarr[1,0].set_ylabel("$|$error in B$|$ [GPa]")

ax31 = axarr[1,1].scatter(srpp[3].get_data_frame(dt='abs_err',ds='results')[pair_names[0]],
                          srpp[3].get_data_frame(dt='abs_err',ds='results')[pair_names[1]],
                          s=1,color=rgb_results,label='results')
ax32 = axarr[1,1].scatter(srpp[3].get_data_frame(dt='abs_err',ds='pareto')[pair_names[0]],
                          srpp[3].get_data_frame(dt='abs_err',ds='pareto')[pair_names[1]],
                          s=1,color=rgb_pareto,label='pareto')
ax33 = axarr[1,1].scatter(srpp[3].get_data_frame(dt='abs_err',ds='culled')[pair_names[0]],
                          srpp[3].get_data_frame(dt='abs_err',ds='culled')[pair_names[1]],
                          s=1,color=rgb_culled,label='culled')
axarr[1,1].legend(handles=[ax21,ax22,ax23])
axarr[1,1].text(0.05,0.95,'N=4',
                verticalalignment = 'top', horizontalalignment = 'left',
                transform=axarr[1,1].transAxes,
                fontsize = 12,
                color='black', 
                bbox=dict(facecolor='white',edgecolor='black'))
axarr[1,1].text(0.05,0.95,'N=4')
axarr[1,1].axis((axis[0],axis[1],axis[2],axis[3]))
axarr[1,1].set_xlabel("$|$error in lattice parameter$|$ [$\AA$]")
axarr[1,1].set_ylabel("$|$error in B$|$ [GPa]")

fig.savefig('fig_1.png',dpi=800)
